"use client";

import dynamic from 'next/dynamic';
import { useEffect, useMemo, useState } from 'react';
const ReactECharts = dynamic(() => import('echarts-for-react'), { ssr: false });

type Criteria = 'cif' | 'id_number' | 'un_number' | 'customer_name';
type Filters = { criterion: Criteria; value: string };

export default function ClientsPage() {
  // Observe theme toggles so charts can re-read CSS variables
  const [themeVersion, setThemeVersion] = useState(0);
  useEffect(() => {
    const el = document.documentElement;
    const obs = new MutationObserver((muts) => {
      for (const m of muts) {
        if (m.type === 'attributes' && m.attributeName === 'class') {
          setThemeVersion((v) => v + 1);
        }
      }
    });
    obs.observe(el, { attributes: true, attributeFilter: ['class'] });
    return () => obs.disconnect();
  }, []);

  const cssVar = (name: string, fallback?: string) => {
    if (typeof window === 'undefined') return fallback || '';
    const v = getComputedStyle(document.documentElement).getPropertyValue(name);
    return v?.trim() || fallback || '';
  };

  const formatK = (v: number) => (Math.abs(v) >= 1000 ? `${Math.round(v / 100) / 10}k` : `${v}`);
  const [filters, setFilters] = useState<Filters>({ criterion: 'cif', value: '' });
  const [formError, setFormError] = useState<string>('');
  const [profile, setProfile] = useState<any | null>(null);
  const [kyc, setKyc] = useState<any[]>([]);
  const [assetsDist, setAssetsDist] = useState<any[]>([]);
  const [assetTrend, setAssetTrend] = useState<any[]>([]);
  const [holdings, setHoldings] = useState<any[]>([]);
  const [assetsSummary, setAssetsSummary] = useState<any[]>([]);
  const [txnSummary, setTxnSummary] = useState<any[]>([]);
  const [riskExposure, setRiskExposure] = useState<any[]>([]);
  const [liab, setLiab] = useState<any[]>([]);
  const [alerts, setAlerts] = useState<any[]>([]);
  const [interactions, setInteractions] = useState<any[]>([]);
  const [dataQuality, setDataQuality] = useState<any | null>(null);
  const [loading, setLoading] = useState(false);

  // formatting helpers for compact numeric/currency display
  const nf = new Intl.NumberFormat('en-US', { maximumFractionDigits: 0 });
  const cf = (n: number, currency: string = 'SAR') =>
    new Intl.NumberFormat('en-US', { style: 'currency', currency, maximumFractionDigits: 0 }).format(n || 0);

  function qs() {
    const p = new URLSearchParams();
    if (filters.value) p.append(filters.criterion, filters.value);
    return p.toString() ? `?${p.toString()}` : '';
  }

  async function onSearch() {
    if (!filters.value.trim()) {
      setFormError('Please enter a value to search.');
      return;
    }
    setFormError('');
    setLoading(true);
    const j = (r: Response) => (r.ok ? r.json() : null);
    try {
      const q = qs();
      const [p, k, ad, at, h, ts, re, li, al, ih, dq, as] = await Promise.all([
        fetch(`/api/customer/profile${q}`).then(j),
        fetch(`/api/customer/kyc_status${q}`).then(j),
        fetch(`/api/customer/assets_distribution${q}`).then(j),
        fetch(`/api/customer/asset_trend${q}`).then(j),
        fetch(`/api/customer/holdings${q}`).then(j),
        fetch(`/api/customer/transactions_summary${q}`).then(j),
        fetch(`/api/customer/risk_exposure${q}`).then(j),
        fetch(`/api/customer/liabilities${q}`).then(j),
        fetch(`/api/customer/alerts${q}`).then(j),
        fetch(`/api/customer/interactions${q}`).then(j),
        fetch(`/api/customer/data_quality${q}`).then(j),
        fetch(`/api/customer/assets_summary${q}`).then(j),
      ]);
      if (p) setProfile(p);
      if (k) setKyc(k);
      if (ad) setAssetsDist(ad);
      if (at) setAssetTrend(at);
      if (h) setHoldings(h);
      if (ts) setTxnSummary(ts);
      if (re) setRiskExposure(re);
      if (li) setLiab(li);
      if (al) setAlerts(al);
      if (ih) setInteractions(ih);
      if (dq) setDataQuality(dq);
      if (as) setAssetsSummary(as);
    } finally {
      setLoading(false);
    }
  }

  function onClear() {
    setFilters({ criterion: 'cif', value: '' });
    setProfile(null);
    setKyc([]);
    setAssetsDist([]);
    setAssetTrend([]);
    setHoldings([]);
    setTxnSummary([]);
    setRiskExposure([]);
    setLiab([]);
    setAlerts([]);
    setInteractions([]);
    setDataQuality(null);
  }

  // Chart options (only for asset distribution and asset trend)
  const assetsDistOption = useMemo(() => {
    if (!assetsDist || assetsDist.length === 0) return null as any;
    const border = cssVar('--border', '#ddd');
    const card = cssVar('--card', '#fff');
    const fg = cssVar('--foreground', '#111');
    const palette = [
      cssVar('--chart-1', '#6366f1'),
      cssVar('--chart-2', '#8b5cf6'),
      cssVar('--chart-3', '#0ea5e9'),
      cssVar('--chart-4', '#22c55e'),
      cssVar('--chart-5', '#f59e0b'),
    ];
    return {
      backgroundColor: card,
      tooltip: {
        trigger: 'item',
        formatter: (p: any) => `${p.name}: ${formatK(p.value)}`,
        backgroundColor: card,
        borderColor: border,
        textStyle: { color: fg },
      },
      legend: { bottom: 0, textStyle: { color: cssVar('--muted-foreground', fg) } },
      color: palette,
      series: [
        {
          type: 'pie',
          radius: ['50%', '75%'],
          itemStyle: { borderRadius: 6, borderColor: card, borderWidth: 1 },
          selectedMode: false,
          hoverAnimation: false,
          emphasis: { disabled: true },
          label: { show: true, color: fg, formatter: (p: any) => `${p.name} ${formatK(p.value as number)}` },
          labelLine: { lineStyle: { color: border } },
          data: assetsDist.map((d: any) => ({ name: d.product, value: d.asset_value })),
        },
      ],
    } as any;
  }, [assetsDist, themeVersion]);

  // Derived KPIs from assetsSummary
  const assetsKpis = useMemo(() => {
    const totalMV = assetsSummary.reduce((s, r) => s + (Number(r.marketValue) || 0), 0);
    const totalBV = assetsSummary.reduce((s, r) => s + (Number(r.bookValue) || 0), 0);
    const gainLossPct = totalBV > 0 ? Math.round(((totalMV - totalBV) / totalBV) * 1000) / 10 : 0;
    const incomeYtd = assetsSummary.reduce((s, r) => s + (Number(r.incomeGeneratedYTD) || 0), 0);
    return { totalMV, totalBV, gainLossPct, incomeYtd };
  }, [assetsSummary]);

  const allocationByAssetOption = useMemo(() => {
    if (!assetsSummary || assetsSummary.length === 0) return null as any;
    const byType: Record<string, number> = {};
    for (const r of assetsSummary) byType[r.assetType] = (byType[r.assetType] || 0) + (Number(r.marketValue) || 0);
    const data = Object.entries(byType).map(([name, value]) => ({ name, value }));
    const border = cssVar('--border', '#ddd');
    const card = cssVar('--card', '#fff');
    const fg = cssVar('--foreground', '#111');
    return {
      backgroundColor: card,
      tooltip: { trigger: 'item', backgroundColor: card, borderColor: border, textStyle: { color: fg } },
      series: [{ type: 'pie', radius: ['46%', '70%'], data }],
    } as any;
  }, [assetsSummary, themeVersion]);

  const assetTrendOption = useMemo(() => {
    if (!assetTrend || assetTrend.length === 0) return null as any;
    const border = cssVar('--border', '#ddd');
    const card = cssVar('--card', '#fff');
    const fg = cssVar('--foreground', '#111');
    const muted = cssVar('--muted', '#eee');
    const primary = cssVar('--primary', '#6366f1');
    const data = assetTrend.map((d: any) => d.asset_value);
    const maxVal = Math.max(...data);
    const paddedMax = Math.ceil((maxVal * 1.1) / 10) * 10; // pad 10% for labels
    return {
      backgroundColor: card,
      tooltip: {
        trigger: 'axis',
        backgroundColor: card,
        borderColor: border,
        textStyle: { color: fg },
        valueFormatter: (v: any) => (typeof v === 'number' ? formatK(v) : v),
      },
      grid: { left: 64, right: 16, top: 24, bottom: 32 },
      xAxis: {
        type: 'category',
        data: assetTrend.map((d: any) => d.date),
        axisLine: { lineStyle: { color: border } },
        axisLabel: { color: cssVar('--muted-foreground', fg), margin: 12 },
        splitLine: { show: true, lineStyle: { color: border } },
      },
      yAxis: {
        type: 'value',
        max: paddedMax,
        axisLine: { lineStyle: { color: border } },
        axisLabel: { color: cssVar('--muted-foreground', fg), formatter: (v: number) => formatK(v), margin: 10 },
        splitLine: { show: true, lineStyle: { color: border } },
      },
      series: [
        {
          type: 'line',
          showSymbol: false,
          emphasis: { disabled: true },
          lineStyle: { width: 2, color: primary },
          areaStyle: { opacity: 0.25, color: muted },
          data,
        },
      ],
    } as any;
  }, [assetTrend, themeVersion]);

  return (
    <div className="p-4">
      <h1 className="text-xl font-semibold">Customer 360</h1>
      <p className="mt-1 text-slate-600 text-sm">Search and view a consolidated customer profile.</p>

      {/* Filters */}
      <div className="mt-3 rounded-lg border border-[var(--border)] bg-[var(--card)] p-4">
        <div className="flex flex-col gap-2 md:flex-row md:items-end md:gap-3">
          <div className="w-full md:w-auto">
            <label className="block text-xs text-slate-600">Search By</label>
            <select
              className="mt-1 w-full md:w-auto max-w-[14rem] rounded border border-[var(--input)] px-2 py-1 text-sm"
              value={filters.criterion}
              onChange={(e) => setFilters({ ...filters, criterion: e.target.value as any })}

